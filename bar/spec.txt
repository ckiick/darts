

Bit Array (bar) library - extended, variable length bit vectors.

Introduction:
=============
A bit array consists of n bits, contiguous in memory, where 0 <= n <= MAXINT.
A bit array (bar) has a defined length in bits, some internal state, and
a defined representation.

A bar is accessed by a bar_t object.  This object should be considered
opaque to end users, as internal implementation and representation may
change.  A valid, initialized 0-length bar can be constructed with a 0-filled
bar_t, or by initializing a bar_t to the variable nobar.

The storage space for a bit array is managed by the interface.  If
more space is needed for a bit array, it is automatically allocated.
Users can explicitly free space in a bar if needed.  A bar can be
declared and used with either a bar_t object or a pointer to a bar_t.

The routines for manipulating bars are implemented using data types
and operations that are "comfortable" to the native platform. That is,
they are efficiently implemented and well supported on all variants.

Representation
==============
MSb/LSb - most/least significant bit
	The MSb of a byte, or a word in a register, is always the leftmost
bit.  The actual computer architecture representation is not relevant: the
C language always uses left-most MSb.

MSB/LSB - most/least significant Byte
	A bar always uses the native endian representation for in-memory
bar_t's. Since the bar is not (normally) addressed at the byte level, the
byte order is only relevant when moving bars between different platforms.
Thus a bar saved to a file must denote which byte order is used. An
implementation must convert non-native byte-order to native byte-order when
reading a bar from a file.

MSW/LSW - most/least significant Word
	Internally, a bar is implemented as a contiguous array of words.
Purely as a matter of convenience, the LSW is defined as word 0 of the
array.  Note that this is irrelevant to the end user, since bar operations
are all done by specifying the bit index.  The word order is also denoted
when a bar is saved to a file, and an implementation must be able to
convert from the non-native word order.

word size (32 vs 64 bit)
	The word size of a bar should not be visible to an end user.  An
implementation should use the largest natural word size that can be
efficiently manipulated at the bit level.  The word size is significant when
saving a bar to a file and must be denoted.  On reading a file an
implementation must convert the saved word size to the native word size.

User visible data structures.
============================
	The only exported data structure is the bar_t object.  All operations
are done on pointers to a bar_t.  This object is considered to be opaque.

	The global, constant variable nobar is a bar_t object that can
be used to set the initial value of a bar_t to the empty state.

Errors
======
	Most functions that can generate errors will return a value that
indicates an error has occurred. If the error was caused by the system
then errno may be set.

	If an error occurs that cannot be reported via a function return
value, then a message is emitted to stderr describing the error and the
program is aborted.

	It is an error to pass a NULL pointer to a bar_t to one of the
defined interface routines, and this may cause the program to abort.

Interface definition
====================

	bar_t *baralloc(uint numbits);
Allocate a bar_t structure and initialize it to hold numbits. The
bits will all be zeros.  If an error occurs NULL is returned (typically
for ENOMEM), and errno may be set.

	void barfree(bar_t *bar);
Free a bar_t allocated by baralloc.

	bar_t *barsize(bar_t *bar, uint numbits);
Set the size of a bar to numbits.  The bar_t may be larger or smaller
than numbits, and may have initial size 0.  A pointer to bar is returned
(this is always the same pointer passed in except for errors).  If
an error occurs, NULL is returned and errno may be set.

	uint barlen(bar_t *bar);
Return the length in bits of bar.  An empty bar returns 0.

	bar_t *bardup(bar_t *bar);
Create a clone of a bar.  Returns a pointer to a bar of the same size
and contents as the bar parameter. On error, NULL is returned and errno
may be set.

	int barcpy(bar_t *dest, bar_t *src);
Copy bar src to bar dest.  The dest is resized if it is not the same size
as src.  Returns number of bits copied. If an error occurs, -1 is returned
and errno may be set.

	uint barget(bar_t *bar, uint bit_index);
Get the value of the bit at index bit_index of bar.  If bit_index is
greater than the size of bar, returns 0.

	int barassign(bar_t *bar, uint bit_index, uint val);
Sets the value of bit bit_index in bar, 0 if val is 0, otherwise 1.
If bit_index is larger than the size of bar, bar is resized to hold bit_index,
the bit is set, and 0 is returned.  Otherwise returns the previous value
of the bit at bit_index.

	int barset(bar_t *bar, uint bit_index);
Set the bit at bit_index to 1 in bar.
Defined as barassign(bar, bit_index, 1);

	int barclr(bar_t *bar, uint bit_index);
Set the bit at bit_index to 0 in bar.
Defined as barassign(bar, bit_index, 0);

	int barflip(bar_t *bar, uint bit_index);
Flip (toggle or invert) the bit at bit_index in bar. If bit_index is larger
than the size of bar, bar is resized to hold bit_index, the bit is set to 1,
and 1 is returned.  Otherwise returns the new value of the bit at bit_index.

	void barfill(bar_t *bar, uint val);
Sets all bits in bar to either 0 if val is 0, otherwise sets all bits to 1.

	void barzero(bar_t *bar);
Clears all bits in bar.  Defined as barfill(&bar, 0);

	int barnot(bar_t *dest, bar_t *src);
Negate all bits in src and copy to dest.  The src bar is not changed.
The dest bar is resized if necessary.  The src and dest bar may be the same.
On error -1 is returned and errno may be set.  Otherwise returns the number
of bits in dest.

	int barand(bar_t *dest, bar_t *src1, bar_t src2);
Put the bitwise AND of src1 and src2 into dest.  If src1 and src are not the
same size, assumes 0s for the smaller bar.  The dest bar is resized if needed.
The dest bar may be the same as either of the src bars.
Returns -1 on error, otherwise the number of bits in dest.

	int baror(bar_t *dest, bar_t *src1, bar_t src2);
Put the bitwise OR of src1 and src2 into dest.  If src1 and src are not the
same size, assumes 0s for the smaller bar.  The dest bar is resized if needed.
The dest bar may be the same as either of the src bars.
Returns -1 on error, otherwise the number of bits in dest.

	int barxor(bar_t *dest, bar_t *src1, bar_t src2);
Put the bitwise XOR of src1 and src2 into dest.  If src1 and src are not the
same size, assumes 0s for the smaller bar.  The dest bar is resized if needed.
The dest bar may be the same as either of the src bars.
Returns -1 on error, otherwise the number of bits in dest.

	int barlsr(bar_t *dest, bar_t *src, uint dist);
Copy the bits from src to dest, shifted dist bits towards the LSb.
This will cause the loss of bits on the LSb end.
The dist parameter may be 0 or greater than the size of src.  The dest
bar will be resized to the same size as src.  Bits shifted 'in' are zero
filled.  Returns -1 on error, otherwise the number of bits in dest.

	int barlsl(bar_t *dest, bar_t *src, uint dist);
Copy the bits from src to dest, shifted dist bits towards the MSb.
This will cause the loss of bits on the MSb end.
The dist parameter may be 0 or greater than the size of src.  The dest
bar will be resized to the same size as src.  Bits shifted 'in' are zero
filled.  Returns -1 on error, otherwise the number of bits in dest.

	int barlsle(bar_t *dest, bar_t *src, uint dist);
Copy the bits from src to dest, shifted dist bits towards the MSb.
No bits are lost: the dest bar is extended to accomodate the increased
size.  The dist parameter may be 0 or greater than the size of src. 
Bits shifted 'in' are zero filled.
Returns -1 on error, otherwise the number of bits in dest.

	int barcmp(bar_t *bar1, bar_t *bar2);
Returns 0 if bar1 and bar2 are equal, -1 if bar1 < bar2, or 1 if bar1 > bar2.
Two bars are equal if all significant bits are equal.  Leading zeros are not
significant.  The bar1 and bar2 need not be the same size: the smaller is
assumed to be zero filled to match the larger. The arguments are not
modified.

	uint barprint(bar_t *bar, char *str, int base);
Convert the bar to a string representation using the specified base.
Base can be either 2 or 16.  Other bases may work, but are not requried to
be supported.

The str parameter must have enough space for all bits in bar plus a null
character.  An empty bar (length 0) is converted to the string "0".
Return value is the length in characters of str, not including the terminating
NULL. If base is invalid, 0 is returned and str is not modified.

	uint barscan(bar_t *bar, char *str, int base);
Convert the string representation of a bar in str to a bar_t.  The str
parameter must consist of only the characters appropriate to base, and will
terminate on any other character.  Base can be either 2 or 16. Other
bases are not required to be supported. An empty string is converted to a bar
of length 0.  The return value is the length in bits of bar.  If base is
invalid, 0 is returned and bar is not modified.  If an error occurs, 0 is
returned and bar is not modified.

	int barwrite(bar_t *bar, int fd);
Write the bar to a file.   The fd must be open for writing.  On success,
returns the number of bytes written to fd.  On failure, returns <0 and
errno may be set.  If bar is NULL, returns 0.

	int barread(bar_t *bar, int fd);
Reads a bar from a file. The fd must be open for reading. The bar must have
been written with barwrite.  On success returns the length in bits of bar
(which may be 0).  The bar will be resized to the number of bits in the
file.
If the file is not in the correct format, returns <0 and bar will be empty.
On other errors, returns <0 and errno may be set.

	When moving saved bar files between platforms it is the
responsibility of the implementation reading the file to determine
compatibility, reject incompatible formats and convert supported formats
to the native represenstation.

	unsigned long bar2ul(bar_t *bar);
Return the first (sizeof(unsigned long)*8) bits from bar. These are
by definition the least significant bits. If the size of
bar is smaller than the size in bits of an unsigned long, the extra bits
are zero filled.  An empty bar returns 0.

	int ul2bar(bar_t *bar, unsigned long word);
Sets the the size of bar to the size in bits of an unsigned long and
copies the bits of word into bar.  Returns size of bar. On failure
returns <0 and errno may be set.

	int barswap(bar_t *dest, bar_t *src);
Copies src to dest, but each word of dest has it's bytes swapped from src.
In other words, changes the byte order (endianness) from src to dest.
Returns the number of bits copied. On error returns < 0 and errno may
be set.

	uint barpopc(bar_t *bar);
Returns the number of bits set in bar.  Eg: population count or hamming
weight.  And empty bar returns 0.

	int barfns(bar_t *bar, uint bit_index);
Returns the index of the next set bit in bar, at or after bit_index,
searching from least significant to most significant bit.
If there are no 1 bits found in bar at or after bit_index, <0 is returned.
An empty bar returns -1.  If bit_index is greater than the number of bits
in bar, <0 is returned.

	int barffs(bar_t *bar);
Returns the index of the first bit set in bar, starting from bit 0.
Defined as barfns(bar, 0);

	int barfnz(bar_t *bar, uint bit_index);
Returns the index of the next clear bit in bar, at or after bit_index,
searching from least significant to most significant bit.
If there are no 0 bits found in bar at or after bit_index, <0 is returned.
An empty bar returns -1.  If bit_index is greater than the number of bits
in bar, <0 is returned.

	int barffz(bar_t *bar);
Returns the index of the first clear bit in bar, starting from bit 0.
Defined as barfnz(bar, 0);

Other functions and operations may be supported.

File format
===========
	The file format for a bar saved to a file consists of 3 parts:
- a header
- a bar_t object
- An array of words containing the bits in the bar

The header contains 16 bytes in the specified order.  It should be read
as an array of bytes and not as words, to avoid byte-order issues.
- Bytes 0-3 contain the bar magic value of 0xBA, 0xFO, 0xFO, 0xBA.
- Bytes 4-7 contain the ascii representation of the version number of
the file format.  The major version is the first two numbers, and the
minor version is the second two.  EG: version 1.02 is stored as
[ '0', '1', '0', '2' ].
- Byte 8 is a set of flags denoting the byte and word order of the data.
      - bit 0 is the  byte order flag
	0 = Big Endian (MSB on left), 1 = Little Endian (LSB on left)
      - bit 1 is word order flag
	0 = LSW at index 0, 1 = MSW at index 0.
Other bits if set should be ignored if not recognized.
- Byte 9 is the word size byte.
This byte specifies how "large" a word was used to write the rest of the file.
It is expressed as the log base 2 of the number of 8-bit bytes in a word.
For 32 bit words this value is 2, (2 exp 2 = 4 bytes, * 8 bits per byte =
32 bits).  For 64 bit words it is 3.  An implementation is required to
support 32 and 64 bit formats.  Word sizes that are not multiples of
8 bits are not supported.
- Byte 10 is the bar_t data size
	The number of bytes in the bar_t structure, which is stored immediately
after the header.
- Byte 11 is reserved and should be written as 0 and ignored when read.
- Bytes 12-15 bit data size (in words)
The size in words of the binary bit data stored in the file.  This
value is stored in Network Byte Order (most significant byte first).

The bar_t structure is implementation dependent and can change with the
version number. However, the first word of the structure written to the
file MUST be the number of bits in the bar.   THe rest of the structure
can be empty, or can be ignored when read.

Aside from the specified header information, values are always written to the
file in the native byte order. It is the responsibility of the code reading
the file to perform any byte-order or word size conversions necessary.

The version number consists of major and minor parts.  When reading a saved
bar, the implementation must check the version numbers against what it supports.
An implementation must be able to read all formats with major numbers <=
the version it writes.  Versions with only different minor versions numbers
must be backwards compatible.

Implementation details
======================

The following are suggested implementation details. An implementation is
not requried to follow them.

bar_t structure suggested contents
	- numbits : the number of bits in this bar.
	- usedwords : number of words used to hold numbits
	- capacity : number of words currently allocated
	- words : pointer to array of words allocated for this bar
The size of the bar_t should therefore be 4 words, which should fit nicely
into a cache line. It also writes nicely to a file.

The code for an implementation should be byte-order and word-size agnostic.
It should compile and run without error on both 32 and 64bit systems
of either byte order, and give the same results on each platform.

The suggested word size is 64 bits, which should be easily supported on most
modern processors. The suggested word-order is to have the LSW at index 0.
This is convenient when bit operations add to the size of the bar, as the
contents do not have to be shifted.

It is suggested that the capacity always be a power of 2, to make allocations
quick and to keep data aligned.  It is suggested that the initial capacity
be enough words to fill a single cache line.

For efficient implementation of operations, the operations should be
always be performed a word at a time.  When copying words between bars,
the standard memmove function should be used. Not only does it handle
overlap of source and destination, but it should be optimized for the
native architecture.

All operations should first check the size of the operands.  It should
never assume that space has already been allocated for the bits.  Any
result resizing should check for and report allocation errors.  Any operand
may be an "empty", zero-filled bar_t structure, and must be handled.
Operations should not assume that the source and destination operands
are distinct, and must produce correct output if operands overlap or point
to the same structure.


Testing
=======
A short test suite is included in bartest.c. Compile and link it with
the bar.c file.  When run with no options, it will only show output if
there is an error.  The return value will be 0 if all tests pass.
To see more output, use one or more -v flags.  Use -h to see all the options
supported.

The bartest.c file can also be used to see examples of the bar routines
in action.

If needed, the bar.c file can be compiled with DEBUG defined, and
various informational messages will be printed by the bar routines.
This can add up to a lot of output if the bar routines are heavily
used.
With DEBUG defined the barcheck routine is also made visible, and is applied
to all bars on input or output of a bar routine. To use barcheck, pass
in a pointer to a bar_t, just like the other routines. If the bar_t is
valid, it will return 0.  If there is a problem with the bar it will return
a non-zero value and print a debug message.

